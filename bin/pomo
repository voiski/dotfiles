#!/bin/bash
# pomodoro
#################################
[ -d ~/.pomo ] || mkdir -p ~/.pomo

esc=$(printf '\033')
RESET="${esc}[0m"


## Files
##############

function file::get(){
    local -r t=${1:-$(date +%Y%m%d)}
    if [ "${t:0:1}" = "-" ]; then
        files::list $((${t:1}+1)) | head -1
        return
    fi
    echo ~/.pomo/pomo_"${t}".yml
}

function files::list(){
    find ~/.pomo -name 'pomo_*' | sort | tail -"${1:-10}"
}


## Stats capture
##############

function stats::process(){
    local -r root=$(pgrep -f 'pomo start')
    if [ -z "$1" ]; then
        echo "$root"
        return
    fi
    pgrep -P "$root"
}

function stats::details(){
    echo Pomo is running...
    if ! [ -f "${today_pomo}" ];then
        notify::fail "But it seems to be from another day since today's file doesn't exist. Please stop it to start again."
    fi
    cat <<-STAT | sed -r 's/^ {4}//'
    
    [Total]
    Sessions:   $(grep -c '\- round ' "$today_pomo")
    Pomos:      $(grep -c '\- start:' "$today_pomo")
    Interrups:  $(grep -c ' interruption:' "$today_pomo")

    [Current/last]
    Current round: $(yq -r '.sessions.-1|keys|.0' "$today_pomo")
    Current pomo:  $(yq -r '.sessions.-1.*.-1.start' "$today_pomo") - $(yq -r '.sessions.-1.*.-1.done' "$today_pomo" | sed 's/null/running.../')
STAT
    if "$(yq -r '.sessions.-1.*.-1| has("interruption")' "$today_pomo")"; then
        echo "Interrupted:   $(yq -r '.sessions.-1.*.-1.interruption_description' "$today_pomo")"
    fi
    local start_time sleep_time
    start_time=$(yq -r '.sessions.-1.*.-1.done' "$today_pomo")
    if [ "${start_time}" == "null" ];then
        start_time=$(yq -r '.sessions.-1.*.-1.start' "$today_pomo")
        sleep_time=25
        printf "Est ending:    " 
    else
        local -r sleep_pid=$(stats::process sleep)
        sleep_time=$(ps -p "${sleep_pid}" -o command | tail -1 | cut -d'_' -f2)
        sleep_time=$((sleep_time/60))
        printf "Next session:  " 
    fi
    date::est "$sleep_time" "$start_time"
}


## Round management
function round::start(){
    local -r round=${1:-1}
    if ! [ -f "${today_pomo}" ];then
        echo "date: $(date +%A\ %b.\ %e,\ %Y)" > "${today_pomo}"
        echo "sessions:" >> "${today_pomo}"
    fi
    echo "Starting new round ${round}"
    echo "- round $(date +%H:%M):" >> "${today_pomo}"
    round::start_session short "${today_pomo}"
    round::start_session short "${today_pomo}"
    round::start_session short "${today_pomo}"
    round::start_session LONG "${today_pomo}" 15
    # 8h of work, 4 rounds is more then enough
    if [ "${round}" -gt 4 ];then
        notify::message "Last round, stopping..." alert Sosumi
        return 0
    fi
    round::start $(( round+1 ))
}

function round::start_session(){
    date::guard
    local -r break_type=$1
    local -r today_pomo=$2
    local -r break_time=${3:-5}
    local -r start=$(date::now)

    function round::start_session::callback() {
        date::guard
        echo "  - start: $(date::now)" >> "${today_pomo}"
    }
    round::session 25 work "New pomo starting ${start}" alert round::start_session::callback
    echo "    done: $(date::now)" >> "${today_pomo}"

    round::session "${break_time}" "break" "Pomo done, take a ${break_type} break" alert date::guard
}

function round::session(){
    local -r duration=$1
    local -r duration_secs=$((duration*60))
    local -r ctx=$2
    local -r msg=$3
    local -r act=${4}
    local -r call_back=${5}

    local -r est=$(date::est "${duration}")
    notify::message "${msg} - ${duration} minutes duration - est ${est}" "${act}" Glass
    ${call_back}

    round::sleep "${duration_secs}" $((duration_secs-25))
    notify::message "25 secs to finish ${ctx} - est ${est}"
    round::sleep "${duration_secs}" 25
}

function round::sleep(){
    # Create named sleep proccess
    echo "$2" | xargs -I "{pomo_$1_}" sleep "{pomo_$1_}"
}


## Notifications
##############

function notify::message(){
    local -r msg=${1}
    local -r act=${2}
    local -r sound=${3:-Tink}
    osascript -e "display notification \"${msg}\" with title \"Pomodoro\" sound name \"${sound}\""
    if [ "${act}" = "alert" ]
    then osascript -e "display alert \"Pomodoro\" message \"${msg}\"" > /dev/null
    fi
}

function notify::fail(){
    echo "${esc}[31mERROR: ${*}$RESET" >&2
    exit 1
}


## Validation
##############

function validate::duplication(){
    if ! [ -f "${today_pomo}" ]; then
        notify::fail "There is no pomo file!"
    fi

    local -r attr=$1
    local -r attr_value="$(yq -r ".sessions.-1.*.-1.${attr}" "$today_pomo")"
    if [ "${attr_value}" != "null" ];then
        notify::fail "There is already an ${attr} for this pomo!"
    fi
}

function validate::pomo_runnig(){
    [ -n "$(stats::process)" ] || notify::fail "No pomo is running now"
}


## Date
##############

function date::est(){
    if [ -n "$2" ];
    then date -jf '%H:%M:%S' -v+"${1}"M "$2" +'%H:%M:%S'
    else date -v+"${1}"M +'%H:%M'
    fi
}

function date::guard() {
    local -r current_date=$(date::string)
    if [ "${current_date}" = "${start_date}" ]
    then return
    fi
    local -r msg="It is now a new day ${current_date}! Stopping ${start_date} pomo session..."
    notify::message "${msg}" alert Sosumi &
    echo "" # break extra lines
    notify::fail "${msg}" # break extra lines
}

function date::string(){
    date +%b.\ %e,\ %Y
}

function date::now(){
    date +%H:%M:%S
}


## CLI commands
##############

start_date=$(date::string)
action=$1
today_pomo=$(file::get)
monthly_interruptions=~/.pomo/interruptions_$(date +%Y%m_%B).yml
case "${action}" in
    start)          # start new pomodoro session stopping automatically at the 4th round
        pomo_pid=$(stats::process)
        if [ -n "${pomo_pid}" ];then
            notify::fail "There is already a pomo session running, stop it first!"
        fi
        echo 'type fg and ctrl+c to STOP! Or use "pomo stop" command.'
        round::start &
        ;;
    description|d)  # add description to the current pomo
        description="${*: 2}"
        if [ -z "${description}" ];then
            notify::fail "Missing description!"
        fi
        validate::duplication description
        echo "    description: ${*}" >> "${today_pomo}"
        ;;
    interruption|i) # registry interruptions in current session; you can provide reason description
        validate::duplication interruption
        echo "    interruption: $(date::now)" >> "${today_pomo}"
        description="${*: 2}"
        if [ -n "${description}" ]
        then echo "    interruption_description: ${description}" >> "${today_pomo}"
        fi
        echo "- $(date)" >> "${monthly_interruptions}"
        ;;
    stats|s)        # print todays pomo stats
        validate::pomo_runnig
        stats::details
        ;;
    skip)           # jump to next session/finish current session
        validate::pomo_runnig
        pomo_pid=$(stats::process sleep)
        kill "${pomo_pid}" &> /dev/null
        sleep 0.5
        kill "$(stats::process sleep)" &> /dev/null
        ;;
    stop|kill)      # kills pomo proccess stopping it for today
        validate::pomo_runnig
        pomo_pid=$(stats::process)
        children_pomo_pid=$(pgrep -P "${pomo_pid}")
        echo "Stopping pomo pid ${pomo_pid}"
        kill "${pomo_pid}"
        if [ -z "${children_pomo_pid}" ]
        then return
        fi
        echo "Stopping round sleep ${children_pomo_pid}"
        kill "${children_pomo_pid}" > /dev/null
        ;;
    print|p|'')     # prints the current pomo session; pass -1..x to print past sessions
        today_pomo=$(file::get "$2")
        [ -f "${today_pomo}" ] && yq e -C "${today_pomo}" || echo "No pomo yet!"
        ;;
    -[0-9]*)
        $0 p "$1"
        ;;
    list|ls|l)      # list existing pomo sessions already giving the command for more details
        limit=${2:-20}
        echo "Print last ${limit}"
        files::list "${limit}" | xargs -L 1 basename | cut -b 6-13 | xargs -I {} echo "pomo p {}"
        ;;
    interruptions)  # print monthly interruptions
        [ -f "${monthly_interruptions}" ] && yq e -C "${monthly_interruptions}" || echo "No interruption this month!"
        ;;
    edit|e)         # edit the current pomodoro session; pass -1..x to edit past sessions
        today_pomo=$(file::get "$2")
        eval "${VISUAL} ${today_pomo}"
        ;;
    help|h)         # prints help
        cat <<-HELP | sed -r 's/^ {8}//'
        Usage: pomo [action] [arg]
        
        Commands:
        $(grep ') *#' "${BASH_SOURCE:0}" | grep -v grep | sed 's/)//')

        Ex:
            pomo d my task  # add description to the running round
            pomo p 20200326 # prints the given pomo session - date id
HELP
        ;;
    *)
        $0 help
        notify::fail "invalid command: ${*:1}"
        ;;
esac
